// <auto-generated />
using System;
using HostelWebAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HostelWebAPI.Migrations
{
    [DbContext(typeof(HostelDBContext))]
    [Migration("20210302202907_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HostelWebAPI.Models.City", b =>
                {
                    b.Property<string>("CityId")
                        .HasColumnName("CityID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("HostelWebAPI.Models.Comment", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnName("CommentID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Comment1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Comment")
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("(N'Default comment')")
                        .HasMaxLength(200);

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnName("PropertyID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("TimeUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserID")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("CommentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("HostelWebAPI.Models.Country", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnName("CountryID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("HostelWebAPI.Models.Image", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnName("ImageID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnName("PropertyID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ImageId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("HostelWebAPI.Models.PaymentStatus", b =>
                {
                    b.Property<string>("PaymentStatusId")
                        .HasColumnName("PaymentStatusID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PaymentStatusId");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("HostelWebAPI.Models.Property", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnName("PropertyID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("(N'Property Discription')")
                        .HasMaxLength(100);

                    b.Property<string>("Introduction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("(N'Property Introduction')")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'PropertyName')")
                        .HasMaxLength(50);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnName("OwnerID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("money");

                    b.Property<string>("PropertyTypeId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PropertyTypeID")
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((1))")
                        .HasMaxLength(50);

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((5.0))");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("TimeUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PropertyId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("HostelWebAPI.Models.PropertyAddress", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnName("PropertyID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnName("CityID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("('Street number default')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Street Name default')")
                        .HasMaxLength(50);

                    b.HasKey("PropertyId")
                        .HasName("PK_RoomAddresses");

                    b.HasIndex("CityId");

                    b.ToTable("PropertyAddress");
                });

            modelBuilder.Entity("HostelWebAPI.Models.PropertyType", b =>
                {
                    b.Property<string>("PropertyTypeId")
                        .HasColumnName("PropertyTypeID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PropertyTypeId");

                    b.ToTable("PropertyType");
                });

            modelBuilder.Entity("HostelWebAPI.Models.Reply", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnName("CommentID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ReplyToCommentId")
                        .IsRequired()
                        .HasColumnName("ReplyToCommentID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CommentId")
                        .HasName("PK_Replies");

                    b.HasIndex("ReplyToCommentId");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("HostelWebAPI.Models.ReservationHistory", b =>
                {
                    b.Property<string>("ReservationId")
                        .HasColumnName("ReservationID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("FromDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentStatusId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PaymentStatusID")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("((1))")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnName("PropertyID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ReservationStatusId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReservationStatusID")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("((1))")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ToDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("money");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ReservationId")
                        .HasName("PK_ReservationHistories");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReservationStatusId");

                    b.ToTable("ReservationHistory");
                });

            modelBuilder.Entity("HostelWebAPI.Models.ReservationStatus", b =>
                {
                    b.Property<string>("ReservationStatusId")
                        .HasColumnName("ReservationStatusID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ReservationStatusId");

                    b.ToTable("ReservationStatus");
                });

            modelBuilder.Entity("HostelWebAPI.Models.UserPropertyLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PropertyId")
                        .HasColumnName("PropertyID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserId", "PropertyId")
                        .HasName("PK_UserPropertyLikes");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserPropertyLike");
                });

            modelBuilder.Entity("HostelWebAPI.Models.City", b =>
                {
                    b.HasOne("HostelWebAPI.Models.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Cities_Countries")
                        .IsRequired();
                });

            modelBuilder.Entity("HostelWebAPI.Models.Comment", b =>
                {
                    b.HasOne("HostelWebAPI.Models.Property", "Property")
                        .WithMany("Comment")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK_Comments_Properties")
                        .IsRequired();
                });

            modelBuilder.Entity("HostelWebAPI.Models.Image", b =>
                {
                    b.HasOne("HostelWebAPI.Models.Property", "Property")
                        .WithMany("Image")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK_Images_Properties")
                        .IsRequired();
                });

            modelBuilder.Entity("HostelWebAPI.Models.Property", b =>
                {
                    b.HasOne("HostelWebAPI.Models.PropertyType", "PropertyType")
                        .WithMany("Property")
                        .HasForeignKey("PropertyTypeId")
                        .HasConstraintName("FK_Properties_PropertyTypes")
                        .IsRequired();
                });

            modelBuilder.Entity("HostelWebAPI.Models.PropertyAddress", b =>
                {
                    b.HasOne("HostelWebAPI.Models.City", "City")
                        .WithMany("PropertyAddress")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_RoomAddresses_Cities")
                        .IsRequired();

                    b.HasOne("HostelWebAPI.Models.Property", "Property")
                        .WithOne("PropertyAddress")
                        .HasForeignKey("HostelWebAPI.Models.PropertyAddress", "PropertyId")
                        .HasConstraintName("FK_RoomAddresses_Properties")
                        .IsRequired();
                });

            modelBuilder.Entity("HostelWebAPI.Models.Reply", b =>
                {
                    b.HasOne("HostelWebAPI.Models.Comment", "Comment")
                        .WithOne("ReplyComment")
                        .HasForeignKey("HostelWebAPI.Models.Reply", "CommentId")
                        .HasConstraintName("FK_Replies_Comments")
                        .IsRequired();

                    b.HasOne("HostelWebAPI.Models.Comment", "ReplyToComment")
                        .WithMany("ReplyReplyToComment")
                        .HasForeignKey("ReplyToCommentId")
                        .HasConstraintName("FK_Replies_Comments1")
                        .IsRequired();
                });

            modelBuilder.Entity("HostelWebAPI.Models.ReservationHistory", b =>
                {
                    b.HasOne("HostelWebAPI.Models.PaymentStatus", "PaymentStatus")
                        .WithMany("ReservationHistory")
                        .HasForeignKey("PaymentStatusId")
                        .HasConstraintName("FK_ReservationHistories_PaymentStatus")
                        .IsRequired();

                    b.HasOne("HostelWebAPI.Models.Property", "Property")
                        .WithMany("ReservationHistory")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK_ReservationHistories_Properties")
                        .IsRequired();

                    b.HasOne("HostelWebAPI.Models.ReservationStatus", "ReservationStatus")
                        .WithMany("ReservationHistory")
                        .HasForeignKey("ReservationStatusId")
                        .HasConstraintName("FK_ReservationHistories_ReservationStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("HostelWebAPI.Models.UserPropertyLike", b =>
                {
                    b.HasOne("HostelWebAPI.Models.Property", "Property")
                        .WithMany("UserPropertyLike")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK_UserPropertyLikes_Properties")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
